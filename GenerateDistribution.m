% Input: 1) seed: seed coefficients of the resulting distribution,
% corresponding to frequencies 1:2B (a vector of length 2B).
% 2) t: the vector of which the resulting distribution will be
% non-negative (a quantization of [0,2pi].

% Output: 1) rho_hat_symm_2B: the 4B+1 x 1 vector of Fourier coefficients of the
% distribution rho, corresponding to frequencies -2B:2B.
% 2) rho_func: the distribution function, defined on [0, 2pi] and
% guarenteed to be non-negative on t. The function is generated by
% completing 'seed' to a 4B+1 x 1 vector (with 1/2pi as its middle value for
% normalization), calculating its corresponding function and then
% subtracting the minimum value to ensure positivity. The function is then
% renormalized to have its middle value be 1/2pi.

function [rho_hat_symm_2B, rho_func]=GenerateDistribution(seed,t,Q,B)

[freq_file_name]=saveFrequencies(Q,B);
load(freq_file_name);

rho_hat_symm_2B_non_normalized =[conj(flip(seed)); 1/(2*pi); seed];
rho_hat_symm_2B_temp=(1/(2*pi)) * (1/abs(rho_hat_symm_2B_non_normalized(k_symm_2B==0)))...
    * rho_hat_symm_2B_non_normalized;
rho_func_temp = @(x) real(rho_hat_symm_2B_temp.'*exp(1i*x'*k_symm_2B).');

min_rho_func=min(rho_func_temp(t));
rho_hat_symm_2B=rho_hat_symm_2B_temp;
rho_hat_symm_2B(k_symm_2B==0)=rho_hat_symm_2B(k_symm_2B==0)-min(min_rho_func,0); %make >=0
rho_hat_symm_2B=rho_hat_symm_2B.*(1/(2*pi))*(1/rho_hat_symm_2B(k_symm_2B==0)); %renormalize
rho_func = @(x) real(rho_hat_symm_2B.'*exp(1i*x.'*k_symm_2B).'); %the final rho_func

end